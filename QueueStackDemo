import java.util.Scanner;

class CustomQueue<T> {
    private static class Node<T> {
        T data;
        Node<T> next;

        Node(T data) {
            this.data = data;
        }
    }

    private Node<T> front;
    private Node<T> rear;

    public void offer(T item) {
        Node<T> newNode = new Node<>(item);
        if (rear == null) {
            front = newNode;
            rear = newNode;
        } else {
            rear.next = newNode;
            rear = newNode;
        }
    }

    public T poll() {
        if (front == null) {
            return null;
        }
        T data = front.data;
        front = front.next;
        if (front == null) {
            rear = null;
        }
        return data;
    }

    public boolean isEmpty() {
        return front == null;
    }

    public int size() {
        int size = 0;
        Node<T> current = front;
        while (current != null) {
            size++;
            current = current.next;
        }
        return size;
    }
}

class CustomStack<T> {
    private static class Node<T> {
        T data;
        Node<T> next;

        Node(T data) {
            this.data = data;
        }
    }

    private Node<T> top;

    public void push(T item) {
        Node<T> newNode = new Node<>(item);
        newNode.next = top;
        top = newNode;
    }

    public T pop() {
        if (top == null) {
            return null;
        }
        T data = top.data;
        top = top.next;
        return data;
    }

    public boolean isEmpty() {
        return top == null;
    }

    public int size() {
        int size = 0;
        Node<T> current = top;
        while (current != null) {
            size++;
            current = current.next;
        }
        return size;
    }
}

public class QueueStackDemo {
    public static void main(String[] args) {
        long startTime = System.currentTimeMillis(); // Record start time

        CustomQueue<String> queue = new CustomQueue<>();
        CustomStack<String> stack = new CustomStack<>();
        Scanner scanner = new Scanner(System.in);

        try {
            System.out.print("Enter the number of messages (not more than 50): ");
            int numMessages = scanner.nextInt();
            scanner.nextLine(); // Consume newline

            if (numMessages <= 0 || numMessages > 50) {
                System.out.println("Number of messages must be between 1 and 50.");
                return;
            }

            int bufferUsageCount = 0;
            long enqueueStartTime = System.currentTimeMillis(); // Record enqueue start time

            for (int i = 0; i < numMessages; i++) {
                String message;
                do {
                    System.out.print("Enter message " + (i + 1) + " (max 250 characters, not empty): ");
                    message = scanner.nextLine().trim();

                    if (message.isEmpty()) {
                        System.out.println("Message cannot be empty. Please enter a message.");
                    }
                } while (message.isEmpty());

                if (message.length() > 250) {
                    System.out.println("Message is too long. Truncating to 250 characters.");
                    message = message.substring(0, 250);
                }

                queue.offer(message);
                bufferUsageCount++;
            }

            long enqueueEndTime = System.currentTimeMillis(); // Record enqueue end time

            System.out.println("Queue size: " + queue.size());

            while (!queue.isEmpty()) {
                String message = queue.poll();
                System.out.println("Enqueue to Stack: " + message);
                stack.push(message);
            }

            System.out.println("Stack size after enqueue: " + stack.size());

            System.out.println("Press Enter to pop from Stack =>");
            scanner.nextLine();

            long popStartTime = System.currentTimeMillis(); // Record pop start time

            while (!stack.isEmpty()) {
                System.out.println("Pop from Stack: " + stack.pop());
            }

            long popEndTime = System.currentTimeMillis(); // Record pop end time

            System.out.println("Stack size after pop: " + stack.size());

            long endTime = System.currentTimeMillis(); // Record end time

            System.out.println("Buffer usage count: " + bufferUsageCount);
            System.out.println("Total execution time: " + (endTime - startTime) + " milliseconds");
            System.out.println("Time taken to enqueue: " + (enqueueEndTime - enqueueStartTime) + " milliseconds");
            System.out.println("Time taken to pop: " + (popEndTime - popStartTime) + " milliseconds");
        } catch (java.util.InputMismatchException e) {
            System.out.println("Invalid input. Please enter a valid number.");
        } catch (java.util.NoSuchElementException e) {
            System.out.println("Input not provided as expected.");
        } catch (java.lang.StringIndexOutOfBoundsException e) {
            System.out.println("An error occurred during message processing.");
        } finally {
            if (scanner != null) {
                scanner.close();
            }
        }
    }
}
